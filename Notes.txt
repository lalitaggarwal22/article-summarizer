rafce => to get the react component structure 
(react arrow funcntion component extention)

We are also using  Redux libraray

peer class used in input :

it is used for when we want to change the state of an element base on the state of sibling element then we can mark the element as a "peer"

Here we want to chage the state of button based on the state of input element



How this works ? 

const newArticle = { ...article, summary: data.summary };

Spread Operator (...article):

This operator takes all the existing properties from the article object and copies them into the new object.
It creates a shallow copy, meaning it references the same nested objects and arrays as the original object.


example : 

//

const article = { title: "My Article", url: "https://example.com" };
const data = { summary: "This is a summary of the article." };

const newArticle = { ...article, summary: data.summary };

console.log(newArticle); // Output: { title: "My Article", url: "https://example.com", summary: "This is a summary of the article." }

//



aworking of this code 

//

import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

const rapidApiKey = import.meta.env.VITE_RAPID_API_ARTICLE_KEY;

export const articleApi = createApi({
  reducerPath: "articleApi",
  baseQuery: fetchBaseQuery({
    baseUrl: "https://article-extractor-and-summarizer.p.rapidapi.com/",
    prepareHeaders: (headers) => {
      headers.set("X-RapidAPI-Key", rapidApiKey);
      headers.set(
        "X-RapidAPI-Host",
        "article-extractor-and-summarizer.p.rapidapi.com"
      );
      return headers;
    },
  }),
  endpoints: (builder) => ({
    getSummary: builder.query({
      query: (params) =>
        `/summarize?url=${encodeURIComponent(params.articleUrl)}&length =3`,
    }),
  }),
});

export const { useLazyGetSummaryQuery } = articleApi;


Working starts here.

Certainly! Let's go through the provided code line by line:

```javascript
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

const rapidApiKey = import.meta.env.VITE_RAPID_API_ARTICLE_KEY;

export const articleApi = createApi({
  reducerPath: "articleApi",
  baseQuery: fetchBaseQuery({
    baseUrl: "https://article-extractor-and-summarizer.p.rapidapi.com/",
    prepareHeaders: (headers) => {
      headers.set("X-RapidAPI-Key", rapidApiKey);
      headers.set(
        "X-RapidAPI-Host",
        "article-extractor-and-summarizer.p.rapidapi.com"
      );
      return headers;
    },
  }),
  endpoints: (builder) => ({
    getSummary: builder.query({
      query: (params) =>
        `/summarize?url=${encodeURIComponent(params.articleUrl)}&length=3`,
    }),
  }),
});

export const { useLazyGetSummaryQuery } = articleApi;
```

1. **Import Statements:**
   - Imports necessary functions (`createApi` and `fetchBaseQuery`) from the `@reduxjs/toolkit/query/react` package.

2. **API Key Declaration:**
   - Declares a constant `rapidApiKey` using the environment variable `VITE_RAPID_API_ARTICLE_KEY`. This variable is assumed to be set in the environment.

3. **`articleApi` Creation:**
   - Creates an API object (`articleApi`) using `createApi` from the `@reduxjs/toolkit/query/react` package.

4. **API Configuration:**
   - Configures the API using the `createApi` function with the following parameters:
      - `reducerPath`: Specifies the name of the Redux slice where the API data will be stored (`"articleApi"` in this case).
      - `baseQuery`: Configures the base query function using `fetchBaseQuery`. It includes the base URL and headers for making requests.

5. **Headers Configuration:**
   - In the `prepareHeaders` function, headers for RapidAPI are set, including the API key (`X-RapidAPI-Key`) and host (`X-RapidAPI-Host`).

6. **Endpoint Configuration:**
   - Defines an endpoint (`getSummary`) using the `builder.query` method. It includes a query function that generates the URL for summarizing an article based on the provided parameters.

7. **Query Parameter Encoding:**
   - Uses the `encodeURIComponent` function to safely encode the article URL parameter in the `getSummary` query.

8. **Setting Query Length Parameter:**
   - Sets the `length` parameter to 3 in the generated URL for summarization.

9. **Export Hook:**
   - Exports the `useLazyGetSummaryQuery` hook, generated by `articleApi`. This hook can be used in React components to trigger the lazy fetch of the article summary.

In summary, this code sets up a Redux-powered API service (`articleApi`) for fetching and summarizing articles using the RapidAPI service. The API configuration includes the base URL, headers, and an endpoint for article summarization. The `useLazyGetSummaryQuery` hook is exported for use in React components.

//       


Working of this code in store.js file 

// 

import { configureStore } from "@reduxjs/toolkit";
import { articleApi } from "./article";

export const store = configureStore({
  reducer: {
    [articleApi.reducerPath]: articleApi.reducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(articleApi.middleware),
});

Explanations starts here 

1. Import Statements:

import { configureStore } from "@reduxjs/toolkit";: Imports the configureStore function from Redux Toolkit, used for creating a Redux store.
import { articleApi } from "./article";: Imports an object named articleApi from a file named article.js, likely containing Redux-related features for articles.
2. Store Creation:

export const store = configureStore({ ... });: Creates a Redux store and exports it as a constant named store.
The configureStore function takes an object with configuration options.
3. Reducer Configuration:

reducer: { ... }: Specifies the reducers that will manage the application's state.
[articleApi.reducerPath]: articleApi.reducer: Adds a reducer dynamically based on the reducerPath property from articleApi. This allows for flexible reducer registration.
4. Middleware Configuration:

middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(articleApi.middleware): Sets up middleware to intercept and handle actions before they reach the reducer.
getDefaultMiddleware: A function provided by Redux Toolkit to get default middlewares (e.g., for asynchronous actions).
.concat(articleApi.middleware): Concatenates the default middleware with any additional middleware defined in articleApi.middleware.
Key Points:

Redux Toolkit: Simplifies Redux setup and best practices.
Dynamic Reducer Registration: Allows for flexible reducer organization.
Middleware: Enables asynchronous actions and other side effects.
Article-Specific Features: The articleApi object likely encapsulates reducers, actions, and middleware related to managing article data.
Overall, this code sets up a Redux store with reducers and middleware to manage application state, specifically focusing on article-related features.

// 



EXTRA KNOWLEDGE  

What is the concept of virtual dom in react?

Key to React's Performance:

The virtual DOM (VDOM) is a crucial concept in React that significantly improves rendering performance, especially for complex applications.

It acts as a lightweight, in-memory representation of the actual DOM (Document Object Model), which is the browser's representation of a web page.

How It Works:

Virtual Representation:

When a React component's state or props change, React creates a new virtual DOM tree representing the updated UI.
This VDOM is a JavaScript object, much faster to manipulate than the actual DOM.
Diffing:

React compares the new VDOM with the previous one to efficiently identify the minimal set of changes needed in the actual DOM.

This process is called "diffing."


Actual DOM Updates:

React updates only those specific elements in the real DOM that have changed, minimizing the amount of DOM manipulation.
Benefits:

Performance:

Reduces the frequency and cost of DOM updates, leading to smoother user interactions and faster rendering.
Minimizes repaints and reflows, which can be expensive browser operations.


Predictability:

React's reconciliation algorithm ensures consistent updates and predictable behavior, making it easier to reason about changes and avoid unexpected side effects.



ross-Platform Compatibility:

The VDOM abstraction allows React to work seamlessly across different platforms and environments, not limited to browsers.
Key Points:

Abstraction Layer: 

The VDOM acts as a middle layer between React components and the browser's DOM.

Optimized Updates: 

React intelligently updates only the necessary parts of the DOM, ensuring efficient rendering.


Performance Optimization: 

It's a key factor in React's ability to deliver smooth user experiences, even with complex UIs and frequent updates.
